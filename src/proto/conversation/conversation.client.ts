// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "conversation.proto" (package "parrot.proto", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ConversationService } from "./conversation";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConversationResponse } from "./conversation";
import type { ConversationRequest } from "./conversation";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service parrot.proto.ConversationService
 */
export interface IConversationServiceClient {
    /**
     * @generated from protobuf rpc: ReceiveConversations(parrot.proto.ConversationRequest) returns (stream parrot.proto.ConversationResponse);
     */
    receiveConversations(input: ConversationRequest, options?: RpcOptions): ServerStreamingCall<ConversationRequest, ConversationResponse>;
}
/**
 * @generated from protobuf service parrot.proto.ConversationService
 */
export class ConversationServiceClient implements IConversationServiceClient, ServiceInfo {
    typeName = ConversationService.typeName;
    methods = ConversationService.methods;
    options = ConversationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ReceiveConversations(parrot.proto.ConversationRequest) returns (stream parrot.proto.ConversationResponse);
     */
    receiveConversations(input: ConversationRequest, options?: RpcOptions): ServerStreamingCall<ConversationRequest, ConversationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConversationRequest, ConversationResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
