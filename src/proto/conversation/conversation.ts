// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "conversation.proto" (package "parrot.proto", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message parrot.proto.ConversationRequest
 */
export interface ConversationRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp Timestamp = 1 [json_name = "Timestamp"];
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message parrot.proto.ConversationResponse
 */
export interface ConversationResponse {
    /**
     * @generated from protobuf field: repeated parrot.proto.Conversation Conversations = 1 [json_name = "Conversations"];
     */
    conversations: Conversation[];
}
/**
 * @generated from protobuf message parrot.proto.Conversation
 */
export interface Conversation {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string User = 2 [json_name = "User"];
     */
    user: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ConversationRequest$Type extends MessageType<ConversationRequest> {
    constructor() {
        super("parrot.proto.ConversationRequest", [
            { no: 1, name: "Timestamp", kind: "message", jsonName: "Timestamp", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ConversationRequest>): ConversationRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConversationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConversationRequest): ConversationRequest {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp Timestamp = 1 [json_name = "Timestamp"];*/ 1:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConversationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp Timestamp = 1 [json_name = "Timestamp"]; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message parrot.proto.ConversationRequest
 */
export const ConversationRequest = new ConversationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConversationResponse$Type extends MessageType<ConversationResponse> {
    constructor() {
        super("parrot.proto.ConversationResponse", [
            { no: 1, name: "Conversations", kind: "message", jsonName: "Conversations", repeat: 1 /*RepeatType.PACKED*/, T: () => Conversation }
        ]);
    }
    create(value?: PartialMessage<ConversationResponse>): ConversationResponse {
        const message = { conversations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConversationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConversationResponse): ConversationResponse {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated parrot.proto.Conversation Conversations = 1 [json_name = "Conversations"];*/ 1:
                    message.conversations.push(Conversation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConversationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated parrot.proto.Conversation Conversations = 1 [json_name = "Conversations"]; */
        for (let i = 0; i < message.conversations.length; i++)
            Conversation.internalBinaryWrite(message.conversations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message parrot.proto.ConversationResponse
 */
export const ConversationResponse = new ConversationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Conversation$Type extends MessageType<Conversation> {
    constructor() {
        super("parrot.proto.Conversation", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "User", kind: "scalar", jsonName: "User", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Conversation>): Conversation {
        const message = { id: "", user: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Conversation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Conversation): Conversation {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string User = 2 [json_name = "User"];*/ 2:
                    message.user = reader.string();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Conversation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string User = 2 [json_name = "User"]; */
        if (message.user !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.user);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message parrot.proto.Conversation
 */
export const Conversation = new Conversation$Type();
/**
 * @generated ServiceType for protobuf service parrot.proto.ConversationService
 */
export const ConversationService = new ServiceType("parrot.proto.ConversationService", [
    { name: "ReceiveConversations", serverStreaming: true, options: {}, I: ConversationRequest, O: ConversationResponse }
]);
