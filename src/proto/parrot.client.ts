// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "parrot.proto" (package "parrot.proto", syntax proto3)
// tslint:disable
import { MessageService } from "./parrot";
import type { Message } from "./parrot";
import type { SendMessageRequest } from "./parrot";
import type { MessagesResponse } from "./parrot";
import type { MessagesRequest } from "./parrot";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ConversationService } from "./parrot";
import type { TakeConversation } from "./parrot";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConversationResponse } from "./parrot";
import type { ConversationRequest } from "./parrot";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service parrot.proto.ConversationService
 */
export interface IConversationServiceClient {
    /**
     * @generated from protobuf rpc: GetAllConversations(parrot.proto.ConversationRequest) returns (stream parrot.proto.ConversationResponse);
     */
    getAllConversations(input: ConversationRequest, options?: RpcOptions): ServerStreamingCall<ConversationRequest, ConversationResponse>;
    /**
     * @generated from protobuf rpc: TakeOverConversation(parrot.proto.TakeConversation) returns (parrot.proto.TakeConversation);
     */
    takeOverConversation(input: TakeConversation, options?: RpcOptions): UnaryCall<TakeConversation, TakeConversation>;
}
/**
 * @generated from protobuf service parrot.proto.ConversationService
 */
export class ConversationServiceClient implements IConversationServiceClient, ServiceInfo {
    typeName = ConversationService.typeName;
    methods = ConversationService.methods;
    options = ConversationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAllConversations(parrot.proto.ConversationRequest) returns (stream parrot.proto.ConversationResponse);
     */
    getAllConversations(input: ConversationRequest, options?: RpcOptions): ServerStreamingCall<ConversationRequest, ConversationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConversationRequest, ConversationResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TakeOverConversation(parrot.proto.TakeConversation) returns (parrot.proto.TakeConversation);
     */
    takeOverConversation(input: TakeConversation, options?: RpcOptions): UnaryCall<TakeConversation, TakeConversation> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TakeConversation, TakeConversation>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service parrot.proto.MessageService
 */
export interface IMessageServiceClient {
    /**
     * @generated from protobuf rpc: GetMessagesByConversationId(parrot.proto.MessagesRequest) returns (stream parrot.proto.MessagesResponse);
     */
    getMessagesByConversationId(input: MessagesRequest, options?: RpcOptions): ServerStreamingCall<MessagesRequest, MessagesResponse>;
    /**
     * @generated from protobuf rpc: SendMessage(parrot.proto.SendMessageRequest) returns (parrot.proto.Message);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, Message>;
}
/**
 * @generated from protobuf service parrot.proto.MessageService
 */
export class MessageServiceClient implements IMessageServiceClient, ServiceInfo {
    typeName = MessageService.typeName;
    methods = MessageService.methods;
    options = MessageService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetMessagesByConversationId(parrot.proto.MessagesRequest) returns (stream parrot.proto.MessagesResponse);
     */
    getMessagesByConversationId(input: MessagesRequest, options?: RpcOptions): ServerStreamingCall<MessagesRequest, MessagesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MessagesRequest, MessagesResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendMessage(parrot.proto.SendMessageRequest) returns (parrot.proto.Message);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, Message> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, Message>("unary", this._transport, method, opt, input);
    }
}
